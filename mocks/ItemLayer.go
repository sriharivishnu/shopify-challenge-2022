// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	db "github.com/sriharivishnu/shopify-challenge/models/db"
	mock "github.com/stretchr/testify/mock"

	models "github.com/sriharivishnu/shopify-challenge/models/api"

	testing "testing"
)

// ItemLayer is an autogenerated mock type for the ItemLayer type
type ItemLayer struct {
	mock.Mock
}

// CreateItem provides a mock function with given fields: payload
func (_m *ItemLayer) CreateItem(payload models.CreateItemPayload) (db.Item, error) {
	ret := _m.Called(payload)

	var r0 db.Item
	if rf, ok := ret.Get(0).(func(models.CreateItemPayload) db.Item); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(db.Item)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.CreateItemPayload) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: itemId
func (_m *ItemLayer) DeleteItem(itemId uint) error {
	ret := _m.Called(itemId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(itemId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetItemById provides a mock function with given fields: itemId
func (_m *ItemLayer) GetItemById(itemId uint) (db.Item, error) {
	ret := _m.Called(itemId)

	var r0 db.Item
	if rf, ok := ret.Get(0).(func(uint) db.Item); ok {
		r0 = rf(itemId)
	} else {
		r0 = ret.Get(0).(db.Item)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItems provides a mock function with given fields:
func (_m *ItemLayer) GetItems() ([]db.Item, error) {
	ret := _m.Called()

	var r0 []db.Item
	if rf, ok := ret.Get(0).(func() []db.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: itemId, payload
func (_m *ItemLayer) UpdateItem(itemId uint, payload models.UpdateItemPayload) (db.Item, error) {
	ret := _m.Called(itemId, payload)

	var r0 db.Item
	if rf, ok := ret.Get(0).(func(uint, models.UpdateItemPayload) db.Item); ok {
		r0 = rf(itemId, payload)
	} else {
		r0 = ret.Get(0).(db.Item)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, models.UpdateItemPayload) error); ok {
		r1 = rf(itemId, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewItemLayer creates a new instance of ItemLayer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewItemLayer(t testing.TB) *ItemLayer {
	mock := &ItemLayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
