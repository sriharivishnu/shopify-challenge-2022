// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	api "github.com/sriharivishnu/shopify-challenge/models/api"
	mock "github.com/stretchr/testify/mock"

	models "github.com/sriharivishnu/shopify-challenge/models/db"

	testing "testing"
)

// WarehouseLayer is an autogenerated mock type for the WarehouseLayer type
type WarehouseLayer struct {
	mock.Mock
}

// AddItemToWarehouse provides a mock function with given fields: warehouseId, itemId
func (_m *WarehouseLayer) AddItemToWarehouse(warehouseId uint, itemId uint) (models.Item, error) {
	ret := _m.Called(warehouseId, itemId)

	var r0 models.Item
	if rf, ok := ret.Get(0).(func(uint, uint) models.Item); ok {
		r0 = rf(warehouseId, itemId)
	} else {
		r0 = ret.Get(0).(models.Item)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(warehouseId, itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWarehouse provides a mock function with given fields: payload
func (_m *WarehouseLayer) CreateWarehouse(payload api.CreateWarehousePayload) (models.Warehouse, error) {
	ret := _m.Called(payload)

	var r0 models.Warehouse
	if rf, ok := ret.Get(0).(func(api.CreateWarehousePayload) models.Warehouse); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(models.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.CreateWarehousePayload) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWarehouses provides a mock function with given fields:
func (_m *WarehouseLayer) GetAllWarehouses() ([]models.Warehouse, error) {
	ret := _m.Called()

	var r0 []models.Warehouse
	if rf, ok := ret.Get(0).(func() []models.Warehouse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Warehouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWarehouseById provides a mock function with given fields: warehouseId
func (_m *WarehouseLayer) GetWarehouseById(warehouseId uint) (models.Warehouse, error) {
	ret := _m.Called(warehouseId)

	var r0 models.Warehouse
	if rf, ok := ret.Get(0).(func(uint) models.Warehouse); ok {
		r0 = rf(warehouseId)
	} else {
		r0 = ret.Get(0).(models.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(warehouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWarehouseLayer creates a new instance of WarehouseLayer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewWarehouseLayer(t testing.TB) *WarehouseLayer {
	mock := &WarehouseLayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
